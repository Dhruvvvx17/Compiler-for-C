Terminals unused in grammar

   CONST


Grammar

    0 $accept: starter $end

    1 starter: starter builder
    2        | builder

    3 builder: function
    4        | declaration

    5 $@1: %empty

    6 $@2: %empty

    7 function: type identifier $@1 '(' argument_list ')' $@2 compound_stmt

    8 type: data_type pointer
    9     | data_type

   10 pointer: '*' pointer
   11        | '*'

   12 data_type: sign_specifier type_specifier
   13          | type_specifier

   14 sign_specifier: SIGNED
   15               | UNSIGNED

   16 type_specifier: INT
   17               | SHORT INT
   18               | SHORT
   19               | LONG
   20               | LONG INT
   21               | LONG_LONG
   22               | LONG_LONG INT
   23               | CHAR
   24               | FLOAT
   25               | VOID
   26               | CHAR_STAR

   27 argument_list: arguments
   28              | %empty

   29 arguments: arguments ',' arg
   30          | arg

   31 arg: type identifier

   32 stmt: compound_stmt
   33     | single_stmt

   34 $@3: %empty

   35 compound_stmt: '{' $@3 statements '}'

   36 statements: statements M stmt
   37           | %empty

   38 single_stmt: if_block
   39            | for_block
   40            | while_block
   41            | declaration
   42            | function_call ';'
   43            | RETURN ';'
   44            | CONTINUE ';'
   45            | BREAK ';'
   46            | RETURN sub_expr ';'
   47            | cin_stat ';'
   48            | cout_stat ';'
   49            | error

   50 cin_stat: CIN INPUT identifier

   51 cout_stat: COUT OUTPUT identifier
   52          | COUT OUTPUT constant

   53 $@4: %empty

   54 $@5: %empty

   55 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

   56 if_block: IF '(' expression ')' M stmt
   57         | IF '(' expression ')' M stmt ELSE N M stmt

   58 $@6: %empty

   59 $@7: %empty

   60 while_block: WHILE M '(' expression ')' M $@6 stmt $@7

   61 declaration: type declaration_list ';'
   62            | declaration_list ';'
   63            | unary_expr ';'

   64 declaration_list: declaration_list ',' sub_decl
   65                 | sub_decl

   66 sub_decl: assignment_expr
   67         | identifier
   68         | array_access

   69 expression_stmt: expression ';'
   70                | ';'

   71 expression: expression ',' sub_expr
   72           | sub_expr

   73 sub_expr: sub_expr '>' sub_expr
   74         | sub_expr '<' sub_expr
   75         | sub_expr EQ sub_expr
   76         | sub_expr NOT_EQ sub_expr
   77         | sub_expr GR_EQ sub_expr
   78         | sub_expr LS_EQ sub_expr
   79         | sub_expr LOGICAL_AND M sub_expr
   80         | sub_expr LOGICAL_OR M sub_expr
   81         | '!' sub_expr
   82         | arithmetic_expr
   83         | assignment_expr
   84         | unary_expr

   85 assignment_expr: lhs assign arithmetic_expr
   86                | lhs '=' arithmetic_expr
   87                | lhs assign array_access
   88                | lhs '=' array_access
   89                | lhs assign function_call
   90                | lhs assign unary_expr
   91                | lhs '=' unary_expr
   92                | unary_expr assign unary_expr
   93                | unary_expr '=' unary_expr

   94 unary_expr: identifier INCREMENT
   95           | identifier DECREMENT
   96           | DECREMENT identifier
   97           | INCREMENT identifier

   98 lhs: identifier
   99    | array_access

  100 identifier: IDENTIFIER

  101 assign: ADD_ASSIGN
  102       | SUB_ASSIGN
  103       | MUL_ASSIGN
  104       | DIV_ASSIGN
  105       | MOD_ASSIGN

  106 arithmetic_expr: arithmetic_expr '+' arithmetic_expr
  107                | arithmetic_expr '-' arithmetic_expr
  108                | arithmetic_expr '*' arithmetic_expr
  109                | arithmetic_expr '/' arithmetic_expr
  110                | arithmetic_expr '%' arithmetic_expr
  111                | '(' arithmetic_expr ')'
  112                | '-' arithmetic_expr
  113                | identifier
  114                | constant

  115 constant: DEC_CONSTANT
  116         | HEX_CONSTANT
  117         | CHAR_CONSTANT
  118         | FLOAT_CONSTANT

  119 array_access: identifier '[' array_index ']'

  120 array_index: constant
  121            | identifier

  122 function_call: identifier '(' parameter_list ')'
  123              | identifier '(' ')'

  124 parameter_list: parameter_list ',' parameter
  125               | parameter

  126 parameter: sub_expr
  127          | STRING

  128 M: %empty

  129 N: %empty


Terminals, with rules where they appear

$end (0) 0
'!' (33) 81
'%' (37) 110
'(' (40) 7 55 56 57 60 111 122 123
')' (41) 7 55 56 57 60 111 122 123
'*' (42) 10 11 108
'+' (43) 106
',' (44) 29 64 71 124
'-' (45) 107 112
'/' (47) 109
';' (59) 42 43 44 45 46 47 48 61 62 63 69 70
'<' (60) 74
'=' (61) 86 88 91 93
'>' (62) 73
'[' (91) 119
']' (93) 119
'{' (123) 35
'}' (125) 35
error (256) 49
IDENTIFIER <entry> (258) 100
DEC_CONSTANT <entry> (259) 115
HEX_CONSTANT <entry> (260) 116
CHAR_CONSTANT <entry> (261) 117
FLOAT_CONSTANT <entry> (262) 118
STRING <entry> (263) 127
LOGICAL_AND (264) 79
LOGICAL_OR (265) 80
LS_EQ (266) 78
GR_EQ (267) 77
EQ (268) 75
NOT_EQ (269) 76
MUL_ASSIGN (270) 103
DIV_ASSIGN (271) 104
MOD_ASSIGN (272) 105
ADD_ASSIGN (273) 101
SUB_ASSIGN (274) 102
INCREMENT (275) 94 97
DECREMENT (276) 95 96
INPUT (277) 50
OUTPUT (278) 51 52
SHORT (279) 17 18
INT (280) 16 17 20 22
LONG (281) 19 20
LONG_LONG (282) 21 22
SIGNED (283) 14
UNSIGNED (284) 15
CONST (285)
VOID (286) 25
CHAR (287) 23
FLOAT (288) 24
CHAR_STAR (289) 26
IF (290) 56 57
FOR (291) 55
WHILE (292) 60
CONTINUE (293) 44
BREAK (294) 45
RETURN (295) 43 46
COUT (296) 51 52
CIN (297) 50
UMINUS (298)
LOWER_THAN_ELSE (299)
ELSE (300) 57


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
starter (64)
    on left: 1 2, on right: 0 1
builder (65)
    on left: 3 4, on right: 1 2
function (66)
    on left: 7, on right: 3
$@1 (67)
    on left: 5, on right: 7
$@2 (68)
    on left: 6, on right: 7
type (69)
    on left: 8 9, on right: 7 31 61
pointer (70)
    on left: 10 11, on right: 8 10
data_type (71)
    on left: 12 13, on right: 8 9
sign_specifier (72)
    on left: 14 15, on right: 12
type_specifier (73)
    on left: 16 17 18 19 20 21 22 23 24 25 26, on right: 12 13
argument_list (74)
    on left: 27 28, on right: 7
arguments (75)
    on left: 29 30, on right: 27 29
arg (76)
    on left: 31, on right: 29 30
stmt <content> (77)
    on left: 32 33, on right: 36 55 56 57 60
compound_stmt <content> (78)
    on left: 35, on right: 7 32
$@3 (79)
    on left: 34, on right: 35
statements <content> (80)
    on left: 36 37, on right: 35 36
single_stmt <content> (81)
    on left: 38 39 40 41 42 43 44 45 46 47 48 49, on right: 33
cin_stat <content> (82)
    on left: 50, on right: 47
cout_stat <content> (83)
    on left: 51 52, on right: 48
for_block <content> (84)
    on left: 55, on right: 39
$@4 (85)
    on left: 53, on right: 55
$@5 (86)
    on left: 54, on right: 55
if_block <content> (87)
    on left: 56 57, on right: 38
while_block <content> (88)
    on left: 60, on right: 40
$@6 (89)
    on left: 58, on right: 60
$@7 (90)
    on left: 59, on right: 60
declaration (91)
    on left: 61 62 63, on right: 4 41
declaration_list (92)
    on left: 64 65, on right: 61 62 64
sub_decl (93)
    on left: 66 67 68, on right: 64 65
expression_stmt <content> (94)
    on left: 69 70, on right: 55
expression <content> (95)
    on left: 71 72, on right: 55 56 57 60 69 71
sub_expr <content> (96)
    on left: 73 74 75 76 77 78 79 80 81 82 83 84, on right: 46 71 72
    73 74 75 76 77 78 79 80 81 126
assignment_expr <content> (97)
    on left: 85 86 87 88 89 90 91 92 93, on right: 66 83
unary_expr <content> (98)
    on left: 94 95 96 97, on right: 63 84 90 91 92 93
lhs <content> (99)
    on left: 98 99, on right: 85 86 87 88 89 90 91
identifier <entry> (100)
    on left: 100, on right: 7 31 50 51 67 94 95 96 97 98 113 119 121
    122 123
assign <op> (101)
    on left: 101 102 103 104 105, on right: 85 87 89 90 92
arithmetic_expr <content> (102)
    on left: 106 107 108 109 110 111 112 113 114, on right: 82 85 86
    106 107 108 109 110 111 112
constant <entry> (103)
    on left: 115 116 117 118, on right: 52 114 120
array_access <content> (104)
    on left: 119, on right: 68 87 88 99
array_index <entry> (105)
    on left: 120 121, on right: 119
function_call <data_type> (106)
    on left: 122 123, on right: 42 89
parameter_list (107)
    on left: 124 125, on right: 122 124
parameter (108)
    on left: 126 127, on right: 124 125
M <instr> (109)
    on left: 128, on right: 36 55 56 57 60 79 80
N <content> (110)
    on left: 129, on right: 55 57


State 0

    0 $accept: . starter $end

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13

    starter           go to state 14
    builder           go to state 15
    function          go to state 16
    type              go to state 17
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    declaration       go to state 21
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 27
    array_access      go to state 28


State 1

  100 identifier: IDENTIFIER .

    $default  reduce using rule 100 (identifier)


State 2

   97 unary_expr: INCREMENT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 29


State 3

   96 unary_expr: DECREMENT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 30


State 4

   17 type_specifier: SHORT . INT
   18               | SHORT .

    INT  shift, and go to state 31

    $default  reduce using rule 18 (type_specifier)


State 5

   16 type_specifier: INT .

    $default  reduce using rule 16 (type_specifier)


State 6

   19 type_specifier: LONG .
   20               | LONG . INT

    INT  shift, and go to state 32

    $default  reduce using rule 19 (type_specifier)


State 7

   21 type_specifier: LONG_LONG .
   22               | LONG_LONG . INT

    INT  shift, and go to state 33

    $default  reduce using rule 21 (type_specifier)


State 8

   14 sign_specifier: SIGNED .

    $default  reduce using rule 14 (sign_specifier)


State 9

   15 sign_specifier: UNSIGNED .

    $default  reduce using rule 15 (sign_specifier)


State 10

   25 type_specifier: VOID .

    $default  reduce using rule 25 (type_specifier)


State 11

   23 type_specifier: CHAR .

    $default  reduce using rule 23 (type_specifier)


State 12

   24 type_specifier: FLOAT .

    $default  reduce using rule 24 (type_specifier)


State 13

   26 type_specifier: CHAR_STAR .

    $default  reduce using rule 26 (type_specifier)


State 14

    0 $accept: starter . $end
    1 starter: starter . builder

    $end        shift, and go to state 34
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13

    builder           go to state 35
    function          go to state 16
    type              go to state 17
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    declaration       go to state 21
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 27
    array_access      go to state 28


State 15

    2 starter: builder .

    $default  reduce using rule 2 (starter)


State 16

    3 builder: function .

    $default  reduce using rule 3 (builder)


State 17

    7 function: type . identifier $@1 '(' argument_list ')' $@2 compound_stmt
   61 declaration: type . declaration_list ';'

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    declaration_list  go to state 36
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 37
    lhs               go to state 26
    identifier        go to state 38
    array_access      go to state 28


State 18

    8 type: data_type . pointer
    9     | data_type .

    '*'  shift, and go to state 39

    $default  reduce using rule 9 (type)

    pointer  go to state 40


State 19

   12 data_type: sign_specifier . type_specifier

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    type_specifier  go to state 41


State 20

   13 data_type: type_specifier .

    $default  reduce using rule 13 (data_type)


State 21

    4 builder: declaration .

    $default  reduce using rule 4 (builder)


State 22

   62 declaration: declaration_list . ';'
   64 declaration_list: declaration_list . ',' sub_decl

    ','  shift, and go to state 42
    ';'  shift, and go to state 43


State 23

   65 declaration_list: sub_decl .

    $default  reduce using rule 65 (declaration_list)


State 24

   66 sub_decl: assignment_expr .

    $default  reduce using rule 66 (sub_decl)


State 25

   63 declaration: unary_expr . ';'
   92 assignment_expr: unary_expr . assign unary_expr
   93                | unary_expr . '=' unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 49
    ';'         shift, and go to state 50

    assign  go to state 51


State 26

   85 assignment_expr: lhs . assign arithmetic_expr
   86                | lhs . '=' arithmetic_expr
   87                | lhs . assign array_access
   88                | lhs . '=' array_access
   89                | lhs . assign function_call
   90                | lhs . assign unary_expr
   91                | lhs . '=' unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 52

    assign  go to state 53


State 27

   67 sub_decl: identifier .
   94 unary_expr: identifier . INCREMENT
   95           | identifier . DECREMENT
   98 lhs: identifier .
  119 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 54
    DECREMENT  shift, and go to state 55
    '['        shift, and go to state 56

    ','       reduce using rule 67 (sub_decl)
    ';'       reduce using rule 67 (sub_decl)
    $default  reduce using rule 98 (lhs)


State 28

   68 sub_decl: array_access .
   99 lhs: array_access .

    ','       reduce using rule 68 (sub_decl)
    ';'       reduce using rule 68 (sub_decl)
    $default  reduce using rule 99 (lhs)


State 29

   97 unary_expr: INCREMENT identifier .

    $default  reduce using rule 97 (unary_expr)


State 30

   96 unary_expr: DECREMENT identifier .

    $default  reduce using rule 96 (unary_expr)


State 31

   17 type_specifier: SHORT INT .

    $default  reduce using rule 17 (type_specifier)


State 32

   20 type_specifier: LONG INT .

    $default  reduce using rule 20 (type_specifier)


State 33

   22 type_specifier: LONG_LONG INT .

    $default  reduce using rule 22 (type_specifier)


State 34

    0 $accept: starter $end .

    $default  accept


State 35

    1 starter: starter builder .

    $default  reduce using rule 1 (starter)


State 36

   61 declaration: type declaration_list . ';'
   64 declaration_list: declaration_list . ',' sub_decl

    ','  shift, and go to state 42
    ';'  shift, and go to state 57


State 37

   92 assignment_expr: unary_expr . assign unary_expr
   93                | unary_expr . '=' unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 49

    assign  go to state 51


State 38

    7 function: type identifier . $@1 '(' argument_list ')' $@2 compound_stmt
   67 sub_decl: identifier .
   94 unary_expr: identifier . INCREMENT
   95           | identifier . DECREMENT
   98 lhs: identifier .
  119 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 54
    DECREMENT  shift, and go to state 55
    '['        shift, and go to state 56

    ','       reduce using rule 67 (sub_decl)
    '('       reduce using rule 5 ($@1)
    ';'       reduce using rule 67 (sub_decl)
    $default  reduce using rule 98 (lhs)

    $@1  go to state 58


State 39

   10 pointer: '*' . pointer
   11        | '*' .

    '*'  shift, and go to state 39

    $default  reduce using rule 11 (pointer)

    pointer  go to state 59


State 40

    8 type: data_type pointer .

    $default  reduce using rule 8 (type)


State 41

   12 data_type: sign_specifier type_specifier .

    $default  reduce using rule 12 (data_type)


State 42

   64 declaration_list: declaration_list ',' . sub_decl

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    sub_decl         go to state 60
    assignment_expr  go to state 24
    unary_expr       go to state 37
    lhs              go to state 26
    identifier       go to state 27
    array_access     go to state 28


State 43

   62 declaration: declaration_list ';' .

    $default  reduce using rule 62 (declaration)


State 44

  103 assign: MUL_ASSIGN .

    $default  reduce using rule 103 (assign)


State 45

  104 assign: DIV_ASSIGN .

    $default  reduce using rule 104 (assign)


State 46

  105 assign: MOD_ASSIGN .

    $default  reduce using rule 105 (assign)


State 47

  101 assign: ADD_ASSIGN .

    $default  reduce using rule 101 (assign)


State 48

  102 assign: SUB_ASSIGN .

    $default  reduce using rule 102 (assign)


State 49

   93 assignment_expr: unary_expr '=' . unary_expr

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    unary_expr  go to state 61
    identifier  go to state 62


State 50

   63 declaration: unary_expr ';' .

    $default  reduce using rule 63 (declaration)


State 51

   92 assignment_expr: unary_expr assign . unary_expr

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    unary_expr  go to state 63
    identifier  go to state 62


State 52

   86 assignment_expr: lhs '=' . arithmetic_expr
   88                | lhs '=' . array_access
   91                | lhs '=' . unary_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    unary_expr       go to state 70
    identifier       go to state 71
    arithmetic_expr  go to state 72
    constant         go to state 73
    array_access     go to state 74


State 53

   85 assignment_expr: lhs assign . arithmetic_expr
   87                | lhs assign . array_access
   89                | lhs assign . function_call
   90                | lhs assign . unary_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    unary_expr       go to state 75
    identifier       go to state 76
    arithmetic_expr  go to state 77
    constant         go to state 73
    array_access     go to state 78
    function_call    go to state 79


State 54

   94 unary_expr: identifier INCREMENT .

    $default  reduce using rule 94 (unary_expr)


State 55

   95 unary_expr: identifier DECREMENT .

    $default  reduce using rule 95 (unary_expr)


State 56

  119 array_access: identifier '[' . array_index ']'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67

    identifier   go to state 80
    constant     go to state 81
    array_index  go to state 82


State 57

   61 declaration: type declaration_list ';' .

    $default  reduce using rule 61 (declaration)


State 58

    7 function: type identifier $@1 . '(' argument_list ')' $@2 compound_stmt

    '('  shift, and go to state 83


State 59

   10 pointer: '*' pointer .

    $default  reduce using rule 10 (pointer)


State 60

   64 declaration_list: declaration_list ',' sub_decl .

    $default  reduce using rule 64 (declaration_list)


State 61

   93 assignment_expr: unary_expr '=' unary_expr .

    $default  reduce using rule 93 (assignment_expr)


State 62

   94 unary_expr: identifier . INCREMENT
   95           | identifier . DECREMENT

    INCREMENT  shift, and go to state 54
    DECREMENT  shift, and go to state 55


State 63

   92 assignment_expr: unary_expr assign unary_expr .

    $default  reduce using rule 92 (assignment_expr)


State 64

  115 constant: DEC_CONSTANT .

    $default  reduce using rule 115 (constant)


State 65

  116 constant: HEX_CONSTANT .

    $default  reduce using rule 116 (constant)


State 66

  117 constant: CHAR_CONSTANT .

    $default  reduce using rule 117 (constant)


State 67

  118 constant: FLOAT_CONSTANT .

    $default  reduce using rule 118 (constant)


State 68

  112 arithmetic_expr: '-' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    identifier       go to state 84
    arithmetic_expr  go to state 85
    constant         go to state 73


State 69

  111 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    identifier       go to state 84
    arithmetic_expr  go to state 86
    constant         go to state 73


State 70

   91 assignment_expr: lhs '=' unary_expr .

    $default  reduce using rule 91 (assignment_expr)


State 71

   94 unary_expr: identifier . INCREMENT
   95           | identifier . DECREMENT
  113 arithmetic_expr: identifier .
  119 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 54
    DECREMENT  shift, and go to state 55
    '['        shift, and go to state 56

    $default  reduce using rule 113 (arithmetic_expr)


State 72

   86 assignment_expr: lhs '=' arithmetic_expr .
  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 86 (assignment_expr)


State 73

  114 arithmetic_expr: constant .

    $default  reduce using rule 114 (arithmetic_expr)


State 74

   88 assignment_expr: lhs '=' array_access .

    $default  reduce using rule 88 (assignment_expr)


State 75

   90 assignment_expr: lhs assign unary_expr .

    $default  reduce using rule 90 (assignment_expr)


State 76

   94 unary_expr: identifier . INCREMENT
   95           | identifier . DECREMENT
  113 arithmetic_expr: identifier .
  119 array_access: identifier . '[' array_index ']'
  122 function_call: identifier . '(' parameter_list ')'
  123              | identifier . '(' ')'

    INCREMENT  shift, and go to state 54
    DECREMENT  shift, and go to state 55
    '('        shift, and go to state 92
    '['        shift, and go to state 56

    $default  reduce using rule 113 (arithmetic_expr)


State 77

   85 assignment_expr: lhs assign arithmetic_expr .
  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 85 (assignment_expr)


State 78

   87 assignment_expr: lhs assign array_access .

    $default  reduce using rule 87 (assignment_expr)


State 79

   89 assignment_expr: lhs assign function_call .

    $default  reduce using rule 89 (assignment_expr)


State 80

  121 array_index: identifier .

    $default  reduce using rule 121 (array_index)


State 81

  120 array_index: constant .

    $default  reduce using rule 120 (array_index)


State 82

  119 array_access: identifier '[' array_index . ']'

    ']'  shift, and go to state 93


State 83

    7 function: type identifier $@1 '(' . argument_list ')' $@2 compound_stmt

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    $default  reduce using rule 28 (argument_list)

    type            go to state 94
    data_type       go to state 18
    sign_specifier  go to state 19
    type_specifier  go to state 20
    argument_list   go to state 95
    arguments       go to state 96
    arg             go to state 97


State 84

  113 arithmetic_expr: identifier .

    $default  reduce using rule 113 (arithmetic_expr)


State 85

  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr
  112                | '-' arithmetic_expr .

    $default  reduce using rule 112 (arithmetic_expr)


State 86

  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr
  111                | '(' arithmetic_expr . ')'

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    ')'  shift, and go to state 98


State 87

  106 arithmetic_expr: arithmetic_expr '+' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    identifier       go to state 84
    arithmetic_expr  go to state 99
    constant         go to state 73


State 88

  107 arithmetic_expr: arithmetic_expr '-' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    identifier       go to state 84
    arithmetic_expr  go to state 100
    constant         go to state 73


State 89

  108 arithmetic_expr: arithmetic_expr '*' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    identifier       go to state 84
    arithmetic_expr  go to state 101
    constant         go to state 73


State 90

  109 arithmetic_expr: arithmetic_expr '/' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    identifier       go to state 84
    arithmetic_expr  go to state 102
    constant         go to state 73


State 91

  110 arithmetic_expr: arithmetic_expr '%' . arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    '-'             shift, and go to state 68
    '('             shift, and go to state 69

    identifier       go to state 84
    arithmetic_expr  go to state 103
    constant         go to state 73


State 92

  122 function_call: identifier '(' . parameter_list ')'
  123              | identifier '(' . ')'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    STRING          shift, and go to state 104
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69
    ')'             shift, and go to state 106

    sub_expr         go to state 107
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112
    parameter_list   go to state 113
    parameter        go to state 114


State 93

  119 array_access: identifier '[' array_index ']' .

    $default  reduce using rule 119 (array_access)


State 94

   31 arg: type . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 115


State 95

    7 function: type identifier $@1 '(' argument_list . ')' $@2 compound_stmt

    ')'  shift, and go to state 116


State 96

   27 argument_list: arguments .
   29 arguments: arguments . ',' arg

    ','  shift, and go to state 117

    $default  reduce using rule 27 (argument_list)


State 97

   30 arguments: arg .

    $default  reduce using rule 30 (arguments)


State 98

  111 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 111 (arithmetic_expr)


State 99

  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  106                | arithmetic_expr '+' arithmetic_expr .
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 106 (arithmetic_expr)


State 100

  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  107                | arithmetic_expr '-' arithmetic_expr .
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 107 (arithmetic_expr)


State 101

  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  108                | arithmetic_expr '*' arithmetic_expr .
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 108 (arithmetic_expr)


State 102

  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  109                | arithmetic_expr '/' arithmetic_expr .
  110                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 109 (arithmetic_expr)


State 103

  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr
  110                | arithmetic_expr '%' arithmetic_expr .

    $default  reduce using rule 110 (arithmetic_expr)


State 104

  127 parameter: STRING .

    $default  reduce using rule 127 (parameter)


State 105

   81 sub_expr: '!' . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 118
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 106

  123 function_call: identifier '(' ')' .

    $default  reduce using rule 123 (function_call)


State 107

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr
  126 parameter: sub_expr .

    LOGICAL_AND  shift, and go to state 119
    LOGICAL_OR   shift, and go to state 120
    LS_EQ        shift, and go to state 121
    GR_EQ        shift, and go to state 122
    EQ           shift, and go to state 123
    NOT_EQ       shift, and go to state 124
    '<'          shift, and go to state 125
    '>'          shift, and go to state 126

    $default  reduce using rule 126 (parameter)


State 108

   83 sub_expr: assignment_expr .

    $default  reduce using rule 83 (sub_expr)


State 109

   84 sub_expr: unary_expr .
   92 assignment_expr: unary_expr . assign unary_expr
   93                | unary_expr . '=' unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 49

    $default  reduce using rule 84 (sub_expr)

    assign  go to state 51


State 110

   94 unary_expr: identifier . INCREMENT
   95           | identifier . DECREMENT
   98 lhs: identifier .
  113 arithmetic_expr: identifier .
  119 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 54
    DECREMENT  shift, and go to state 55
    '['        shift, and go to state 56

    MUL_ASSIGN  reduce using rule 98 (lhs)
    DIV_ASSIGN  reduce using rule 98 (lhs)
    MOD_ASSIGN  reduce using rule 98 (lhs)
    ADD_ASSIGN  reduce using rule 98 (lhs)
    SUB_ASSIGN  reduce using rule 98 (lhs)
    '='         reduce using rule 98 (lhs)
    $default    reduce using rule 113 (arithmetic_expr)


State 111

   82 sub_expr: arithmetic_expr .
  106 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
  107                | arithmetic_expr . '-' arithmetic_expr
  108                | arithmetic_expr . '*' arithmetic_expr
  109                | arithmetic_expr . '/' arithmetic_expr
  110                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91

    $default  reduce using rule 82 (sub_expr)


State 112

   99 lhs: array_access .

    $default  reduce using rule 99 (lhs)


State 113

  122 function_call: identifier '(' parameter_list . ')'
  124 parameter_list: parameter_list . ',' parameter

    ','  shift, and go to state 127
    ')'  shift, and go to state 128


State 114

  125 parameter_list: parameter .

    $default  reduce using rule 125 (parameter_list)


State 115

   31 arg: type identifier .

    $default  reduce using rule 31 (arg)


State 116

    7 function: type identifier $@1 '(' argument_list ')' . $@2 compound_stmt

    $default  reduce using rule 6 ($@2)

    $@2  go to state 129


State 117

   29 arguments: arguments ',' . arg

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    type            go to state 94
    data_type       go to state 18
    sign_specifier  go to state 19
    type_specifier  go to state 20
    arg             go to state 130


State 118

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr
   81         | '!' sub_expr .

    $default  reduce using rule 81 (sub_expr)


State 119

   79 sub_expr: sub_expr LOGICAL_AND . M sub_expr

    $default  reduce using rule 128 (M)

    M  go to state 131


State 120

   80 sub_expr: sub_expr LOGICAL_OR . M sub_expr

    $default  reduce using rule 128 (M)

    M  go to state 132


State 121

   78 sub_expr: sub_expr LS_EQ . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 133
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 122

   77 sub_expr: sub_expr GR_EQ . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 134
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 123

   75 sub_expr: sub_expr EQ . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 135
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 124

   76 sub_expr: sub_expr NOT_EQ . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 136
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 125

   74 sub_expr: sub_expr '<' . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 137
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 126

   73 sub_expr: sub_expr '>' . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 138
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 127

  124 parameter_list: parameter_list ',' . parameter

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    STRING          shift, and go to state 104
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 107
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112
    parameter        go to state 139


State 128

  122 function_call: identifier '(' parameter_list ')' .

    $default  reduce using rule 122 (function_call)


State 129

    7 function: type identifier $@1 '(' argument_list ')' $@2 . compound_stmt

    '{'  shift, and go to state 140

    compound_stmt  go to state 141


State 130

   29 arguments: arguments ',' arg .

    $default  reduce using rule 29 (arguments)


State 131

   79 sub_expr: sub_expr LOGICAL_AND M . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 142
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 132

   80 sub_expr: sub_expr LOGICAL_OR M . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 143
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 133

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   78         | sub_expr LS_EQ sub_expr .
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    $default  reduce using rule 78 (sub_expr)


State 134

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   77         | sub_expr GR_EQ sub_expr .
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    $default  reduce using rule 77 (sub_expr)


State 135

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   75         | sub_expr EQ sub_expr .
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    LS_EQ  shift, and go to state 121
    GR_EQ  shift, and go to state 122
    '<'    shift, and go to state 125
    '>'    shift, and go to state 126

    $default  reduce using rule 75 (sub_expr)


State 136

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   76         | sub_expr NOT_EQ sub_expr .
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    LS_EQ  shift, and go to state 121
    GR_EQ  shift, and go to state 122
    '<'    shift, and go to state 125
    '>'    shift, and go to state 126

    $default  reduce using rule 76 (sub_expr)


State 137

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   74         | sub_expr '<' sub_expr .
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    $default  reduce using rule 74 (sub_expr)


State 138

   73 sub_expr: sub_expr . '>' sub_expr
   73         | sub_expr '>' sub_expr .
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    $default  reduce using rule 73 (sub_expr)


State 139

  124 parameter_list: parameter_list ',' parameter .

    $default  reduce using rule 124 (parameter_list)


State 140

   35 compound_stmt: '{' . $@3 statements '}'

    $default  reduce using rule 34 ($@3)

    $@3  go to state 144


State 141

    7 function: type identifier $@1 '(' argument_list ')' $@2 compound_stmt .

    $default  reduce using rule 7 (function)


State 142

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   79         | sub_expr LOGICAL_AND M sub_expr .
   80         | sub_expr . LOGICAL_OR M sub_expr

    LS_EQ   shift, and go to state 121
    GR_EQ   shift, and go to state 122
    EQ      shift, and go to state 123
    NOT_EQ  shift, and go to state 124
    '<'     shift, and go to state 125
    '>'     shift, and go to state 126

    $default  reduce using rule 79 (sub_expr)


State 143

   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr
   80         | sub_expr LOGICAL_OR M sub_expr .

    LOGICAL_AND  shift, and go to state 119
    LS_EQ        shift, and go to state 121
    GR_EQ        shift, and go to state 122
    EQ           shift, and go to state 123
    NOT_EQ       shift, and go to state 124
    '<'          shift, and go to state 125
    '>'          shift, and go to state 126

    $default  reduce using rule 80 (sub_expr)


State 144

   35 compound_stmt: '{' $@3 . statements '}'

    $default  reduce using rule 37 (statements)

    statements  go to state 145


State 145

   35 compound_stmt: '{' $@3 statements . '}'
   36 statements: statements . M stmt

    '}'  shift, and go to state 146

    $default  reduce using rule 128 (M)

    M  go to state 147


State 146

   35 compound_stmt: '{' $@3 statements '}' .

    $default  reduce using rule 35 (compound_stmt)


State 147

   36 statements: statements M . stmt

    error       shift, and go to state 148
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 149
    FOR         shift, and go to state 150
    WHILE       shift, and go to state 151
    CONTINUE    shift, and go to state 152
    BREAK       shift, and go to state 153
    RETURN      shift, and go to state 154
    COUT        shift, and go to state 155
    CIN         shift, and go to state 156
    '{'         shift, and go to state 140

    type              go to state 157
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 158
    compound_stmt     go to state 159
    single_stmt       go to state 160
    cin_stat          go to state 161
    cout_stat         go to state 162
    for_block         go to state 163
    if_block          go to state 164
    while_block       go to state 165
    declaration       go to state 166
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 167
    array_access      go to state 28
    function_call     go to state 168


State 148

   49 single_stmt: error .

    $default  reduce using rule 49 (single_stmt)


State 149

   56 if_block: IF . '(' expression ')' M stmt
   57         | IF . '(' expression ')' M stmt ELSE N M stmt

    '('  shift, and go to state 169


State 150

   55 for_block: FOR . '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

    '('  shift, and go to state 170


State 151

   60 while_block: WHILE . M '(' expression ')' M $@6 stmt $@7

    $default  reduce using rule 128 (M)

    M  go to state 171


State 152

   44 single_stmt: CONTINUE . ';'

    ';'  shift, and go to state 172


State 153

   45 single_stmt: BREAK . ';'

    ';'  shift, and go to state 173


State 154

   43 single_stmt: RETURN . ';'
   46            | RETURN . sub_expr ';'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69
    ';'             shift, and go to state 174

    sub_expr         go to state 175
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 155

   51 cout_stat: COUT . OUTPUT identifier
   52          | COUT . OUTPUT constant

    OUTPUT  shift, and go to state 176


State 156

   50 cin_stat: CIN . INPUT identifier

    INPUT  shift, and go to state 177


State 157

   61 declaration: type . declaration_list ';'

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    declaration_list  go to state 36
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 37
    lhs               go to state 26
    identifier        go to state 27
    array_access      go to state 28


State 158

   36 statements: statements M stmt .

    $default  reduce using rule 36 (statements)


State 159

   32 stmt: compound_stmt .

    $default  reduce using rule 32 (stmt)


State 160

   33 stmt: single_stmt .

    $default  reduce using rule 33 (stmt)


State 161

   47 single_stmt: cin_stat . ';'

    ';'  shift, and go to state 178


State 162

   48 single_stmt: cout_stat . ';'

    ';'  shift, and go to state 179


State 163

   39 single_stmt: for_block .

    $default  reduce using rule 39 (single_stmt)


State 164

   38 single_stmt: if_block .

    $default  reduce using rule 38 (single_stmt)


State 165

   40 single_stmt: while_block .

    $default  reduce using rule 40 (single_stmt)


State 166

   41 single_stmt: declaration .

    $default  reduce using rule 41 (single_stmt)


State 167

   67 sub_decl: identifier .
   94 unary_expr: identifier . INCREMENT
   95           | identifier . DECREMENT
   98 lhs: identifier .
  119 array_access: identifier . '[' array_index ']'
  122 function_call: identifier . '(' parameter_list ')'
  123              | identifier . '(' ')'

    INCREMENT  shift, and go to state 54
    DECREMENT  shift, and go to state 55
    '('        shift, and go to state 92
    '['        shift, and go to state 56

    ','       reduce using rule 67 (sub_decl)
    ';'       reduce using rule 67 (sub_decl)
    $default  reduce using rule 98 (lhs)


State 168

   42 single_stmt: function_call . ';'

    ';'  shift, and go to state 180


State 169

   56 if_block: IF '(' . expression ')' M stmt
   57         | IF '(' . expression ')' M stmt ELSE N M stmt

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    expression       go to state 181
    sub_expr         go to state 182
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 170

   55 for_block: FOR '(' . expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69
    ';'             shift, and go to state 183

    expression_stmt  go to state 184
    expression       go to state 185
    sub_expr         go to state 182
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 171

   60 while_block: WHILE M . '(' expression ')' M $@6 stmt $@7

    '('  shift, and go to state 186


State 172

   44 single_stmt: CONTINUE ';' .

    $default  reduce using rule 44 (single_stmt)


State 173

   45 single_stmt: BREAK ';' .

    $default  reduce using rule 45 (single_stmt)


State 174

   43 single_stmt: RETURN ';' .

    $default  reduce using rule 43 (single_stmt)


State 175

   46 single_stmt: RETURN sub_expr . ';'
   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 119
    LOGICAL_OR   shift, and go to state 120
    LS_EQ        shift, and go to state 121
    GR_EQ        shift, and go to state 122
    EQ           shift, and go to state 123
    NOT_EQ       shift, and go to state 124
    '<'          shift, and go to state 125
    '>'          shift, and go to state 126
    ';'          shift, and go to state 187


State 176

   51 cout_stat: COUT OUTPUT . identifier
   52          | COUT OUTPUT . constant

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67

    identifier  go to state 188
    constant    go to state 189


State 177

   50 cin_stat: CIN INPUT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 190


State 178

   47 single_stmt: cin_stat ';' .

    $default  reduce using rule 47 (single_stmt)


State 179

   48 single_stmt: cout_stat ';' .

    $default  reduce using rule 48 (single_stmt)


State 180

   42 single_stmt: function_call ';' .

    $default  reduce using rule 42 (single_stmt)


State 181

   56 if_block: IF '(' expression . ')' M stmt
   57         | IF '(' expression . ')' M stmt ELSE N M stmt
   71 expression: expression . ',' sub_expr

    ','  shift, and go to state 191
    ')'  shift, and go to state 192


State 182

   72 expression: sub_expr .
   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 119
    LOGICAL_OR   shift, and go to state 120
    LS_EQ        shift, and go to state 121
    GR_EQ        shift, and go to state 122
    EQ           shift, and go to state 123
    NOT_EQ       shift, and go to state 124
    '<'          shift, and go to state 125
    '>'          shift, and go to state 126

    $default  reduce using rule 72 (expression)


State 183

   70 expression_stmt: ';' .

    $default  reduce using rule 70 (expression_stmt)


State 184

   55 for_block: FOR '(' expression_stmt . M expression_stmt M expression ')' $@4 N M stmt $@5

    $default  reduce using rule 128 (M)

    M  go to state 193


State 185

   69 expression_stmt: expression . ';'
   71 expression: expression . ',' sub_expr

    ','  shift, and go to state 191
    ';'  shift, and go to state 194


State 186

   60 while_block: WHILE M '(' . expression ')' M $@6 stmt $@7

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    expression       go to state 195
    sub_expr         go to state 182
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 187

   46 single_stmt: RETURN sub_expr ';' .

    $default  reduce using rule 46 (single_stmt)


State 188

   51 cout_stat: COUT OUTPUT identifier .

    $default  reduce using rule 51 (cout_stat)


State 189

   52 cout_stat: COUT OUTPUT constant .

    $default  reduce using rule 52 (cout_stat)


State 190

   50 cin_stat: CIN INPUT identifier .

    $default  reduce using rule 50 (cin_stat)


State 191

   71 expression: expression ',' . sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    sub_expr         go to state 196
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 192

   56 if_block: IF '(' expression ')' . M stmt
   57         | IF '(' expression ')' . M stmt ELSE N M stmt

    $default  reduce using rule 128 (M)

    M  go to state 197


State 193

   55 for_block: FOR '(' expression_stmt M . expression_stmt M expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69
    ';'             shift, and go to state 183

    expression_stmt  go to state 198
    expression       go to state 185
    sub_expr         go to state 182
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 194

   69 expression_stmt: expression ';' .

    $default  reduce using rule 69 (expression_stmt)


State 195

   60 while_block: WHILE M '(' expression . ')' M $@6 stmt $@7
   71 expression: expression . ',' sub_expr

    ','  shift, and go to state 191
    ')'  shift, and go to state 199


State 196

   71 expression: expression ',' sub_expr .
   73 sub_expr: sub_expr . '>' sub_expr
   74         | sub_expr . '<' sub_expr
   75         | sub_expr . EQ sub_expr
   76         | sub_expr . NOT_EQ sub_expr
   77         | sub_expr . GR_EQ sub_expr
   78         | sub_expr . LS_EQ sub_expr
   79         | sub_expr . LOGICAL_AND M sub_expr
   80         | sub_expr . LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 119
    LOGICAL_OR   shift, and go to state 120
    LS_EQ        shift, and go to state 121
    GR_EQ        shift, and go to state 122
    EQ           shift, and go to state 123
    NOT_EQ       shift, and go to state 124
    '<'          shift, and go to state 125
    '>'          shift, and go to state 126

    $default  reduce using rule 71 (expression)


State 197

   56 if_block: IF '(' expression ')' M . stmt
   57         | IF '(' expression ')' M . stmt ELSE N M stmt

    error       shift, and go to state 148
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 149
    FOR         shift, and go to state 150
    WHILE       shift, and go to state 151
    CONTINUE    shift, and go to state 152
    BREAK       shift, and go to state 153
    RETURN      shift, and go to state 154
    COUT        shift, and go to state 155
    CIN         shift, and go to state 156
    '{'         shift, and go to state 140

    type              go to state 157
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 200
    compound_stmt     go to state 159
    single_stmt       go to state 160
    cin_stat          go to state 161
    cout_stat         go to state 162
    for_block         go to state 163
    if_block          go to state 164
    while_block       go to state 165
    declaration       go to state 166
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 167
    array_access      go to state 28
    function_call     go to state 168


State 198

   55 for_block: FOR '(' expression_stmt M expression_stmt . M expression ')' $@4 N M stmt $@5

    $default  reduce using rule 128 (M)

    M  go to state 201


State 199

   60 while_block: WHILE M '(' expression ')' . M $@6 stmt $@7

    $default  reduce using rule 128 (M)

    M  go to state 202


State 200

   56 if_block: IF '(' expression ')' M stmt .
   57         | IF '(' expression ')' M stmt . ELSE N M stmt

    ELSE  shift, and go to state 203

    $default  reduce using rule 56 (if_block)


State 201

   55 for_block: FOR '(' expression_stmt M expression_stmt M . expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 64
    HEX_CONSTANT    shift, and go to state 65
    CHAR_CONSTANT   shift, and go to state 66
    FLOAT_CONSTANT  shift, and go to state 67
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 68
    '!'             shift, and go to state 105
    '('             shift, and go to state 69

    expression       go to state 204
    sub_expr         go to state 182
    assignment_expr  go to state 108
    unary_expr       go to state 109
    lhs              go to state 26
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 73
    array_access     go to state 112


State 202

   60 while_block: WHILE M '(' expression ')' M . $@6 stmt $@7

    $default  reduce using rule 58 ($@6)

    $@6  go to state 205


State 203

   57 if_block: IF '(' expression ')' M stmt ELSE . N M stmt

    $default  reduce using rule 129 (N)

    N  go to state 206


State 204

   55 for_block: FOR '(' expression_stmt M expression_stmt M expression . ')' $@4 N M stmt $@5
   71 expression: expression . ',' sub_expr

    ','  shift, and go to state 191
    ')'  shift, and go to state 207


State 205

   60 while_block: WHILE M '(' expression ')' M $@6 . stmt $@7

    error       shift, and go to state 148
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 149
    FOR         shift, and go to state 150
    WHILE       shift, and go to state 151
    CONTINUE    shift, and go to state 152
    BREAK       shift, and go to state 153
    RETURN      shift, and go to state 154
    COUT        shift, and go to state 155
    CIN         shift, and go to state 156
    '{'         shift, and go to state 140

    type              go to state 157
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 208
    compound_stmt     go to state 159
    single_stmt       go to state 160
    cin_stat          go to state 161
    cout_stat         go to state 162
    for_block         go to state 163
    if_block          go to state 164
    while_block       go to state 165
    declaration       go to state 166
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 167
    array_access      go to state 28
    function_call     go to state 168


State 206

   57 if_block: IF '(' expression ')' M stmt ELSE N . M stmt

    $default  reduce using rule 128 (M)

    M  go to state 209


State 207

   55 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' . $@4 N M stmt $@5

    $default  reduce using rule 53 ($@4)

    $@4  go to state 210


State 208

   60 while_block: WHILE M '(' expression ')' M $@6 stmt . $@7

    $default  reduce using rule 59 ($@7)

    $@7  go to state 211


State 209

   57 if_block: IF '(' expression ')' M stmt ELSE N M . stmt

    error       shift, and go to state 148
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 149
    FOR         shift, and go to state 150
    WHILE       shift, and go to state 151
    CONTINUE    shift, and go to state 152
    BREAK       shift, and go to state 153
    RETURN      shift, and go to state 154
    COUT        shift, and go to state 155
    CIN         shift, and go to state 156
    '{'         shift, and go to state 140

    type              go to state 157
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 212
    compound_stmt     go to state 159
    single_stmt       go to state 160
    cin_stat          go to state 161
    cout_stat         go to state 162
    for_block         go to state 163
    if_block          go to state 164
    while_block       go to state 165
    declaration       go to state 166
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 167
    array_access      go to state 28
    function_call     go to state 168


State 210

   55 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 . N M stmt $@5

    $default  reduce using rule 129 (N)

    N  go to state 213


State 211

   60 while_block: WHILE M '(' expression ')' M $@6 stmt $@7 .

    $default  reduce using rule 60 (while_block)


State 212

   57 if_block: IF '(' expression ')' M stmt ELSE N M stmt .

    $default  reduce using rule 57 (if_block)


State 213

   55 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N . M stmt $@5

    $default  reduce using rule 128 (M)

    M  go to state 214


State 214

   55 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M . stmt $@5

    error       shift, and go to state 148
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 149
    FOR         shift, and go to state 150
    WHILE       shift, and go to state 151
    CONTINUE    shift, and go to state 152
    BREAK       shift, and go to state 153
    RETURN      shift, and go to state 154
    COUT        shift, and go to state 155
    CIN         shift, and go to state 156
    '{'         shift, and go to state 140

    type              go to state 157
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 215
    compound_stmt     go to state 159
    single_stmt       go to state 160
    cin_stat          go to state 161
    cout_stat         go to state 162
    for_block         go to state 163
    if_block          go to state 164
    while_block       go to state 165
    declaration       go to state 166
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 167
    array_access      go to state 28
    function_call     go to state 168


State 215

   55 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt . $@5

    $default  reduce using rule 54 ($@5)

    $@5  go to state 216


State 216

   55 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5 .

    $default  reduce using rule 55 (for_block)
